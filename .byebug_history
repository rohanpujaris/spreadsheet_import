c
Tax.all
c
Tax.all
c
Tax.all
c
Tax.all
c
Tax.all
c
Tax.all
c
n
unique_by_attributes
exit
c
Tax.all
c
options[:update_existing_record]
update_existing_record
n
options
c
options
c
unique_by_attributes && update_existing_record
c
exit
Tax.all
Tax
c
user.all
c
user.all
c
user.all
c
user.all
c
u.all
u.create
u.all
u.first
u = Class.new(ActiveRecord::Base) { self.table_name = 'users' }
u.first
u.all
u = Class.new(ActiveRecord::Base) { self.table_name = 'user' }
Class.new(ActiveRecord::Base) { self.table_name = 'user' }
c
n
counting_completed?
count
n
count
exit
c
row_processor.new(unprocessed_row).process
row_processor
c
row_processor
c
row_processor
c
valid
c
row
unprocessed_row(row)
c
      end
        acc[k] == reader.spreasheet.cell(row, v)
mapping.each_with_object({}) do |(k, v), acc|
mapping
unprocessed_row(row)
c
mapping
unprocessed_row(row)
process_row(row)
row
c
rows
c
sr.each_row {|t| p t}
c
sr.each_row {|t| puts t}
c
sr.each_row {|t| puts t}
c
sr.each_row {|t| puts t}
c
n
c
sr.row_range
c
sr.end_row
sr.start_row
sr.row_range
c
sr.starting_row
sr.ending_row
sr.end_row
sr.start_row
sr.start
sr
